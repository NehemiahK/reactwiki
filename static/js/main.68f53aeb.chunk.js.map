{"version":3,"sources":["logo.svg","components/Card.js","components/Results.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","onClick","window","open","result","link","title","description","Results","results","map","el","components_Card","key","Search","type","onChange","value","App","state","input","handleChange","e","_this","setState","target","getResults","seachTerm","url","concat","fetch","then","data","json","res","i","length","push","href","components_Search","this","components_Results","sort","b","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+MCezBC,qBAXF,SAACC,GACV,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAKC,OAAOC,KAAKP,EAAMQ,OAAOC,KAAK,YAClER,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMQ,OAAOE,OACpCT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,OAAOG,iBCDVC,EAJC,SAACZ,GACb,OAAOC,EAAAC,EAAAC,cAAA,WAAMH,EAAMa,QAAQC,IAAK,SAACC,GAAD,OAAQd,EAAAC,EAAAC,cAACa,EAAD,CAAMR,OAAQO,EAAIE,IAAKF,EAAGL,YCEvDQ,SAJA,SAAClB,GACZ,OAAOC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOC,SAAUpB,EAAMoB,SAAUC,MAAOrB,EAAMqB,WCqD3DC,6MAjDbC,MAAQ,CACNC,MAAM,GACNX,QAAQ,MAGVY,aAAe,SAACC,GACdC,EAAKC,SAAS,CACZJ,MAAME,EAAEG,OAAOR,WAInBS,WAAa,WACX,IAAIC,EAAYJ,EAAKJ,MAAMC,MACvBQ,EAAG,yEAAAC,OAA4EF,EAA5E,KAEPG,MAAMF,GACLG,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAEF,IADA,IAAIzB,EAAU,GACL0B,EAAE,EAAGA,EAAED,EAAI,GAAGE,OAAQD,IAAI,CACjC,IAAI/B,EAAS,CACXE,MAAO4B,EAAI,GAAGC,GACd5B,YAAa2B,EAAI,GAAGC,GACpB9B,KAAM6B,EAAI,GAAGC,IAEf1B,EAAQ4B,KAAKjC,GAGdmB,EAAKC,SAAS,CACdf,uFAML,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,8CACEF,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,+CAA+Cb,OAAO,UAA9D,UADF,wBAGA5B,EAAAC,EAAAC,cAACwC,EAAD,CAAQvB,SAAUwB,KAAKnB,aAAcJ,MAAOuB,KAAKrB,MAAMC,QACvDvB,EAAAC,EAAAC,cAAA,UAAQE,QAASuC,KAAKd,YAAtB,UACA7B,EAAAC,EAAAC,cAAC0C,EAAD,CAAShC,QAAS+B,KAAKrB,MAAMV,QAAQiC,KAAK,SAAC5C,EAAE6C,GAAH,OAAS7C,EAAEQ,MAAQqC,EAAErC,OAAS,EAAG,cA5CjEsC,aCMEC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.68f53aeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './card.css';\r\n\r\n\r\nconst Card = (props) => {\r\n    return <div className=\"card\">\r\n        <div className=\"link\" onClick={() =>window.open(props.result.link,'_blank')}>\r\n        <h4 className=\"title\">{props.result.title}</h4>\r\n        <p>{props.result.description}</p>\r\n            </div>\r\n        </div>\r\n        \r\n\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from './Card';\r\n\r\nconst Results = (props) => {\r\n    return <div>{props.results.map( (el) => <Card result={el} key={el.title}/>)}</div>\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport './search.css';\r\nconst Search = (props) =>{\r\n    return <div><input type=\"text\" onChange={props.onChange} value={props.value}/></div>;\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Results from './components/Results';\nimport Search from './components/Search';\n\nclass App extends Component {\n  state = {\n    input:'',\n    results:[]\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      input:e.target.value\n    });\n  }\n\n  getResults = () => {\n    let seachTerm = this.state.input;\n    let url = `https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&search=\"${seachTerm}\"`;\n\n    fetch(url)\n    .then(data => data.json())\n    .then(res => {\n        let results = [];\n        for (let i=0; i<res[1].length; i++){\n          let result = {\n            title: res[1][i],\n            description: res[2][i],\n            link: res[3][i]\n          }\n          results.push(result);\n        }\n        \n         this.setState({\n         results\n         })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>React Wiki App</h2>\n        <p>Enter a search term below or click \n          <a href=\"https://en.wikipedia.org/wiki/Special:Random\" target=\"_blank\"> here </a>\n           for a random article</p>\n        <Search onChange={this.handleChange} value={this.state.input}/>\n        <button onClick={this.getResults}>Search</button>\n        <Results results={this.state.results.sort((a,b) => a.title < b.title ? -1: 1)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}